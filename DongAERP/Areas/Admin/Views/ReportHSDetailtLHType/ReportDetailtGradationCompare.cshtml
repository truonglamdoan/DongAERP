@using Kendo.Mvc.UI
@using System.Collections.Generic;
@using System.Web.Mvc;
@using DongA.Entities;
@using System.Data;
@model System.Data.DataTable

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;
    int year = DateTime.Today.Year;

    var listData = (List<string>)ViewData["listData"];

    string gradation = string.Empty;
    string toYear = string.Empty;
    string reportTypeID = string.Empty;
    string marketID = string.Empty;

    string titleGradatonYear = string.Empty;
    string titleGradatonLastYear = string.Empty;
    string text = " tháng năm";

    if (listData != null)
    {
        gradation = listData[0];
        toYear = listData[1];
        reportTypeID = listData[2];
        marketID = listData[3];

        switch (gradation)
        {
            case "1":
                text = string.Concat("3", text);
                break;
            case "2":
                text = string.Concat("6", text);
                break;
            case "3":
                text = string.Concat("9", text);
                break;
            default:
                text = string.Concat("12", text);
                break;
        }

        titleGradatonYear = string.Format("Lũy kế {0} {1}", text, toYear);
        titleGradatonLastYear = string.Format("Lũy kế {0} {1}", text, int.Parse(toYear) - 1);
    }
}
<script src="~/Areas/Admin/Scripts/ReportHSDetailt/ReportHSDetailtLH.js"></script>
@if (marketID.Contains("1"))
{
    <h1 class="h3 mb-4 text-gray-800">Chi tiết- Giai đoạn - Hồ sơ Châu Á</h1>
}
else
{
    <h1 class="h3 mb-4 text-gray-800">Chi tiết- Giai đoạn - Tất cả</h1>
}

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">
<div style=" display: flex; ">

    <ul class="search-item" style="width: 100%;margin-top: 5px;margin-bottom: 0px;">
        @*<a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-gradation-forAll" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>*@
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-excel-gradation-forAll" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<p class="mb-4">1. Theo Hồ sơ chi trả loại hình dịch vụ</p>
<div class="row">

    <div class="col-lg-6" style="flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Hồ sơ từng dịch vụ từng Hồ sơ của Chi Quầy </h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                        .Name("chartGradationCompareDSChiQuay")
                        .Title( string.Format("Hồ sơ từng dịch vụ từng Hồ sơ \n Giai đoạn: {0} {1}", text, year))
                        .Legend(legend => legend
                            .Position(ChartLegendPosition.Top)
                        )
                        .SeriesDefaults(seriesDefaults => seriesDefaults
                            .Column()
                        )
                        .ChartArea(chartArea =>
                        {
                            chartArea.Height(350);
                        })
                        .DataSource(ds => ds
                            .Read(read => read.Action("SearchColumnChartReportForGradationForDSChiQuay", "ReportHSDetailtLHType").Data("onDataReportTypeID"))
                            .Group(group => group.Add(model => model.NameGradationCompare))
                            )

                        .Series(series =>
                        {
                            series.Bar(model => model.amount).Name("#= group.value #");
                                //.CategoryField("NameType");

                            })
                        .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                        .CategoryAxis(axis => axis
                            .Categories(categories => categories.NameType)
                            .MajorGridLines(lines => lines.Visible(false))
                        //.MajorGridLines(lines => lines.Visible(true))
                        )
                        .ValueAxis(axis => axis
                            .Numeric()
                            .Labels(labels => labels.Format("{0:n0}"))
                            .Line(line => line.Visible(false))
                        )
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0:n0}")
                            .Template("#= series.name #: #= kendo.format('{0:n0}', value) #")
                        )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style="flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Hồ sơ từng dịch vụ từng Hồ sơ của Chi Nhà </h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                        .Name("chartGradationCompareDSChiNha")
                        .Title(string.Format("Hồ sơ từng dịch vụ từng Hồ sơ \n Giai đoạn: {0} {1}", text, year))
                        .Legend(legend => legend
                            .Position(ChartLegendPosition.Top)
                        )
                        .SeriesDefaults(seriesDefaults => seriesDefaults
                            .Column()
                        )
                        .ChartArea(chartArea =>
                        {
                            chartArea.Height(350);
                        })
                        .DataSource(ds => ds
                            .Read(read => read.Action("SearchColumnChartReportForGradationForDSChiNha", "ReportHSDetailtLHType").Data("onDataReportTypeID"))
                            .Group(group => group.Add(model => model.NameGradationCompare))
                            )

                        .Series(series =>
                        {
                            series.Bar(model => model.amount).Name("#= group.value #");
                                //.CategoryField("NameType");

                            })
                        .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                        .CategoryAxis(axis => axis
                            .Categories(categories => categories.NameType)
                            .MajorGridLines(lines => lines.Visible(false))
                        //.MajorGridLines(lines => lines.Visible(true))
                        )
                        .ValueAxis(axis => axis
                            .Numeric()
                            .Labels(labels => labels.Format("{0:n0}"))
                            .Line(line => line.Visible(false))
                        )
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0:n0}")
                            .Template("#= series.name #: #= kendo.format('{0:n0}', value) #")
                        )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style="flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Hồ sơ từng dịch vụ từng Hồ sơ của chuyển khoản </h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                        .Name("chartGradationCompareDSCK")
                        .Title(string.Format("Hồ sơ từng dịch vụ từng Hồ sơ \n Giai đoạn: {0} {1}", text, year))
                        .Legend(legend => legend
                            .Position(ChartLegendPosition.Top)
                        )
                        .SeriesDefaults(seriesDefaults => seriesDefaults
                            .Column()
                        )
                        .ChartArea(chartArea =>
                        {
                            chartArea.Height(350);
                        })
                        .DataSource(ds => ds
                            .Read(read => read.Action("SearchColumnChartReportForGradationForDSCK", "ReportHSDetailtLHType").Data("onDataReportTypeID"))
                            .Group(group => group.Add(model => model.NameGradationCompare))
                            )

                        .Series(series =>
                        {
                            series.Bar(model => model.amount).Name("#= group.value #");
                                //.CategoryField("NameType");

                            })
                        .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                        .CategoryAxis(axis => axis
                            .Categories(categories => categories.NameType)
                            .MajorGridLines(lines => lines.Visible(false))
                        //.MajorGridLines(lines => lines.Visible(true))
                        )
                        .ValueAxis(axis => axis
                            .Numeric()
                            .Labels(labels => labels.Format("{0:n0}"))
                            .Line(line => line.Visible(false))
                        )
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0:n0}")
                            .Template("#= series.name #: #= kendo.format('{0:n0}', value) #")
                        )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Tỉ trọng từng dịch vụ từng Hồ sơ (%)</h6>
            </div>
            <div class="card-body">
                <div id="chart"></div>
                @(Html.Kendo().Chart<DongA.Entities.GradationCharColumn>()
                    .Name("ColumnchartForYearPercent")
                    .Title(string.Format("Tỉ trọng từng dịch vụ từng Hồ sơ \n Giai đoạn: {0} {1}", text, year))
                    .Legend(legend => legend
                        .Position(ChartLegendPosition.Top)
                    )
                    .PlotArea(plotArea => plotArea.Background("white"))
                    .SeriesDefaults(seriesDefaults => seriesDefaults
                        .Column()
                        .Stack(true)
                    )
                    .ChartArea(chartArea =>
                    {
                        chartArea.Height(550);
                    })
                    .DataSource(ds => ds
                        .Read(read => read.Action("SearchColumnChartReportForGradationPercent", "ReportHSDetailtLHType").Data("onDataReportTypeID"))
                        .Group(group =>
                        {
                            group.Add(model => model.Serie);
                        })
                        .Sort(sort => sort.Add(model => model.Segmento).Ascending())
                    )

                    .Series(series =>
                    {
                        series.Column(model => model.Valor1)
                                .Name("#= group.value #");
                    })
                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                    .CategoryAxis(axis => axis
                        .Categories(categories => categories.Segmento)
                        .MajorGridLines(lines => lines.Visible(false))
                        .Line(line => line.Visible(false))
                    )
                    .CategoryAxis(axis => axis
                        .Categories("Chi Nhà", "Chi Quầy", "Chuyển khoản")
                        .MajorGridLines(lines => lines.Visible(true).Color("black"))
                        .Line(line => line.Visible(true))
                        .Labels(label => label.Font("18px Arial,Helvetica,sans-serif"))
                    )
                    .ValueAxis(axis => axis
                        .Numeric()
                        .Labels(labels => labels.Format("{0:N0}"))
                        .Line(line => line.Visible(false))
                        .Max(100)
                    )
                    .Tooltip(tooltip => tooltip
                        .Visible(true)
                        .Format("{0:N0} %")
                        .Template("#= series.name#: #= kendo.format('{0:N2} %', value) #")
                    )
                )
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Loại hình dịch vụ </h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                    .Name("gridGradationCompare")
                    .HtmlAttributes(new { style = " overflow: auto; " })
                    .Columns(columns =>
                    {
                        columns.Bound("MarketName")
                            .Hidden()
                            .ClientGroupHeaderTemplate("#= value #");

                        columns.Bound("ReportID").Title("").Locked(true).Width(200)
                        .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                        .HtmlAttributes(new { style = " text-align: center;" })
                        ////.ClientGroupFooterTemplate("Tổng")
                        .ClientFooterTemplate("Tổng tất cả");
                        columns.Group(group => group
                            .Title("Chi Quầy")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("CQ1").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                                info.Bound("CQ2").Title(string.Format("Năm {0}", toYear)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                            })
                        );
                        columns.Group(group => group
                            .Title("Chi Nhà")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("CN1").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                                info.Bound("CN2").Title(string.Format("Năm {0}", toYear)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                            })
                        );
                        columns.Group(group => group
                            .Title("Chuyển khoản")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("CK1").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                                info.Bound("CK2").Title(string.Format("Năm {0}", toYear)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                            })

                        );
                        columns.Group(group => group
                            .Title("Tổng")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("TDS1").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;center;font-weight: 700;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                                info.Bound("TDS2").Title(string.Format("Năm {0}", toYear)).Format("{0:n0}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;center;font-weight: 700;" })
                                    //.ClientGroupFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>")
                                    .ClientFooterTemplate("<div style='float: right;'>#= kendo.toString(sum,'0,0')#</div>");
                            })

                        );
                    })
                    .Scrollable(scrollable => scrollable.Height("auto"))
                    .Sortable() // Enable sorting
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        //.Batch(true)
                        .ServerOperation(false)
                        .Read(read => read.Action("SearchGridReportForGradation", "ReportHSDetailtLHType").Data("onDataReportTypeID"))

                        .Group(group =>

                            group.Add("MarketName", typeof(string))
                        )
                        .Aggregates(aggregates =>
                        {
                            aggregates.Add("CQ1", typeof(double)).Sum();
                            aggregates.Add("CQ2", typeof(double)).Sum();

                            aggregates.Add("CN1", typeof(double)).Sum();
                            aggregates.Add("CN2", typeof(double)).Sum();

                            aggregates.Add("CK1", typeof(double)).Sum();
                            aggregates.Add("CK2", typeof(double)).Sum();

                            aggregates.Add("TDS1", typeof(double)).Sum();
                            aggregates.Add("TDS2", typeof(double)).Sum();
                        })
                    )
                    .Events(events => events
                        .DataBound("onDataBoundgridGradationCompare")
                    )
                )
            </div>
        </div>
    </div>
</div>

@*<style>
        tr.k-grouping-row {
            display: none;
        }
    </style>*@

<script type="text/javascript">

    function GradationCompareDSGrid() {

        let gradationDic = $("#gradation").data("kendoComboBox").value() + "," + $("#gradation").data("kendoComboBox").text();
        return {
            Gradation: gradationDic,
            ToYear: $('#ToYear').data('kendoDatePicker').value().getFullYear(),
        };
    }

    // In đậm cho Grid
    function onDataBound(arg) {

        //let lastRow = $('#gridGradationCompare tbody tr');
        //$(lastRow[lastRow.length - 1]).css('font-weight', 'bold');
        //$(lastRow[lastRow.length - 2]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompare tbody tr');
        for (let i = 2; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 1; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    // In đậm cho Grid
    function onDataBoundgridGradationCompare(arg) {

        //let lastRow = $('#gridGradationCompare tbody tr');
        //$(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        //// Tô màu dòng record có tỉ lệ tăng giảm
        //let trGrid = $('#gridGradationComparePercent tbody tr');
        //for (let i = 2; i < trGrid.length; i++) {

        //    let tdGrid = $(trGrid[i]).find('td');

        //    // Theo % thì loại đối tượng tổng ra
        //    for (let j = 1; j < tdGrid.length - 1; j++) {
        //        tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

        //        // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
        //        if (tdCellValue != null) {
        //            $(tdGrid[j]).css('color', 'red');
        //            if (tdCellValue > 0) {
        //                $(tdGrid[j]).css('color', 'green');
        //            }
        //        }
        //    }
        //}
    }

    function onDataReportTypeID(arg) {

        return {
            gradation: "@gradation",
            year: "@toYear",
            reportTypeID: "@reportTypeID",
            marketID: "@marketID"
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>