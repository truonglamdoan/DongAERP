@using Kendo.Mvc.UI
@using System.Collections.Generic;
@using System.Web.Mvc;
@using DongA.Entities;

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;

    string monthYear = string.Concat(DateTime.Today.ToString("MMMM"), " ", DateTime.Today.ToString("yyyy"));

    string month = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year);
    string lastMonth = string.Format("Tháng {0}/{1}", DateTime.Today.Month - 1, DateTime.Today.Year);
    string monthLastYear = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year - 1);

    var listData = (List<string>)ViewData["listData"];

    string toMonth = string.Empty;
    string toYear = string.Empty;
    string reportTypeID = string.Empty;
    string marketID = string.Empty;

    if (listData != null)
    {
        toMonth = listData[0];
        toYear = listData[1];
        reportTypeID = listData[2];
        marketID = listData[3];

        month = string.Format("Tháng {0}/{1}", toMonth, toYear);
        lastMonth = int.Parse(toMonth) == 1 ? string.Format("Tháng {0}/{1}", 12, int.Parse(toYear) - 1) : string.Format("Tháng {0}/{1}", int.Parse(toMonth) - 1, toYear);
        monthLastYear = string.Format("Tháng {0}/{1}", toMonth, int.Parse(toYear) - 1);
    }

}

<script src="~/Areas/Admin/Scripts/ReportHSDetailt/ReportHSDetailtMarketLT.js"></script>
<h1 class="h3 mb-4 text-gray-800">Chi tiết- So sánh</h1>

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">
<div style=" display: flex; ">

    <ul class="search-item" style="width: 100%;margin-top: 5px;margin-bottom: 0px;">
        @*<a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-comparemonth-forAll" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>*@
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-grid-comparemonth-forAll" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<p class="mb-4">1.Báo cáo chi tiết - Doanh số chi trả theo thị trường - Loại tiền</p>
<div class="row">
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (VND)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareVND")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - VND \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllVND", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (USD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareUSD")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - USD \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllUSD", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (EUR)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareEUR")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - EUR \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllEUR", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (CAD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareCAD")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - CAD \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllCAD", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (AUD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareAUD")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - AUD \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllAUD", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Doanh số chi trả từng thị trường cho tháng hiện tại, tháng trước và cùng kì năm trước (GBP)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                    .Name("chartGradationCompareGBP")
                                    .Title(string.Format("Doanh số chi trả theo từng thị trường - GBP \n {0}", month))
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top)
                                    )
                                    .SeriesDefaults(seriesDefaults => seriesDefaults
                                        .Column()
                                    )
                                    .ChartArea(chartArea =>
                                    {
                                        chartArea.Height(350);
                                    })
                                    .DataSource(ds => ds
                                        .Read(read => read.Action("SearchColumnsChartCompareMonthForAllGBP", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                        .Group(group => group.Add(model => model.NameGradationCompare))
                                    //.Sort(sort => sort.Add(model => model.NameGradationCompare).Ascending())
                                    )
                                    .Series(series =>
                                    {
                                        series.Bar(model => model.amount).Name("#= group.value #");
                                            //.CategoryField("NameType");

                                        })
                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                    .CategoryAxis(axis => axis
                                        .Categories(categories => categories.NameType)
                                        .MajorGridLines(lines => lines.Visible(false))
                                    )
                                    .ValueAxis(axis => axis
                                        .Numeric()
                                        .Labels(labels => labels.Format("{0:N0}"))
                                        .Line(line => line.Visible(false))
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Format("{0:N0}")
                                        .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Tỉ trọng chi trả từng theo loại tiền cho tháng hiện tại, tháng trước và cùng kì năm trước (%)</h6>
            </div>
            <div class="card-body">
                <div id="chart"></div>
                @(Html.Kendo().Chart<DongA.Entities.GradationCharColumn>()
                                .Name("ColumnChartStackCompareMonthForAllPercent")
                                .Title(string.Format("Tỉ trọng chi trả từng theo loại tiền cho tháng hiện tại, tháng trước và cùng kì năm trước \n {0}", month))
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Top)
                                )
                                .PlotArea(plotArea => plotArea.Background("white"))
                                .SeriesDefaults(seriesDefaults => seriesDefaults
                                //.Column()
                                //.Stack(true)
                                    .Bar().Stack(ChartStackType.Normal)
                                )
                                .ChartArea(chartArea =>
                                {
                                    chartArea.Height(550);
                                })
                                .DataSource(ds => ds
                                    .Read(read => read.Action("SearchColumnChartStackCompareMonthForAll", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                                    .Group(group =>
                                    {
                                        group.Add(model => model.Serie);
                                    })

                                    .Sort(sort => sort.Add(model => model.Segmento).Ascending())
                                    )

                                .Series(series =>
                                {
                                    series.Bar(model => model.Valor1)
                                            .Name("#= group.value #");
                                })
                                .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                .CategoryAxis(axis => axis
                                    .Categories(categories => categories.Segmento)
                                    .MajorGridLines(lines => lines.Visible(false))
                                    .Line(line => line.Visible(false))
                                //.Labels(labels => labels.Rotation(-15))
                                )
                                .CategoryAxis(axis => axis
                                    .Categories("AUD", "CAD", "EUR", "GBP", "USD", "VND")
                                    .MajorGridLines(lines => lines.Visible(true).Color("black"))
                                    .Line(line => line.Visible(true))

                                )
                                .ValueAxis(axis => axis
                                    .Numeric()
                                    .Labels(labels => labels.Format("{0:N0}"))
                                    .Line(line => line.Visible(false))
                                    .Max(100)

                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0:N0} %")
                                    .Template("#= series.name#: #= kendo.format('{0:N0} %', value) #")
                                )
                )
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu so sánh chi trả từng loại tiền cho tháng hiện tại, tháng trước và cùng kì năm trước (USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                            .Name("gridCompareMonthForAll")
                            .HtmlAttributes(new { style = " overflow: auto; " })
                            .Columns(columns =>
                            {
                                columns.Bound(Model.Columns[0].ColumnName).Title("Thị trường").Width(150).Locked(true)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" });
                                columns.Group(group => group
                                    .Title("VND")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("VND1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("VND2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("VND3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("USD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("USD1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("USD2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("USD3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("EUR")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("EUR1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("EUR2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("EUR3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("CAD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("CAD1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("CAD2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("CAD3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("AUD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("AUD1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("AUD2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("AUD3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("GBP")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("GBP1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("GBP2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("GBP3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("Tổng")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("TDS1").Width(200).Title(monthLastYear).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                        info.Bound("TDS2").Width(200).Title(lastMonth).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                        info.Bound("TDS3").Width(200).Title(month).Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                    })
                                );
                            })
                            .Scrollable(scrollable => scrollable.Height("auto"))
                            .Sortable() // Enable sorting
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Read(read => read.Action("SearchReportDetailtCompareMonthForAll", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                            )
                            .Events(events => events
                                .DataBound("onDataBoundGridCompareMonthForAll")
                            )
                )
            </div>
        </div>
    </div>

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Tăng giảm so với tháng trước và so với cùng kì theo từng thị trường (USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                            .Name("gridCompareMonthForAllCompare")
                            .HtmlAttributes(new { style = " overflow: auto; " })
                            .Columns(columns =>
                            {
                                columns.Bound(Model.Columns[0].ColumnName).Title("Thị trường").Width(150).Locked(true)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" });

                                columns.Group(group => group
                                    .Title("VND")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("VND1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("VND2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("USD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("USD1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("USD2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("EUR")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("EUR1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("EUR2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("CAD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("CAD1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("CAD2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("AUD")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("AUD1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("AUD2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("GBP")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("GBP1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        info.Bound("GBP2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                    })
                                );
                                columns.Group(group => group
                                    .Title("Tổng")
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: center;" })
                                    .Columns(info =>
                                    {
                                        info.Bound("TDS1").Width(200).Title("So với tháng trước").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                        info.Bound("TDS2").Width(200).Title("So với cùng kì").Format("{0:N0}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                    })
                                );
                            })
                            .Scrollable(scrollable => scrollable.Height("auto"))
                            .Sortable() // Enable sorting
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Read(read => read.Action("SearchReportDetailtCompareMonthForAllCompare", "ReportHSDetailtMarketLT").Data("onDataReportTypeID"))
                            )
                            .Events(events => events
                                .DataBound("onDataBoundGridCompareMonthForAllCompare")
                            )
                )
            </div>
        </div>
    </div>
</div>

@*<style>
        tr.k-grouping-row {
            display: none;
        }
    </style>*@

<script type="text/javascript">

    function GradationCompareDSGrid() {

        let gradationDic = $("#gradation").data("kendoComboBox").value() + "," + $("#gradation").data("kendoComboBox").text();
        return {
            Gradation: gradationDic,
            ToYear: $('#ToYear').data('kendoDatePicker').value().getFullYear(),
        };
    }

    // Tô đậm cho Grid
    function onDataBoundGridCompareMonthForAll(arg) {

        let lastRow = $('#gridCompareMonthForAll tbody tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        lastRow = $('#gridCompareMonthForAll tbody:eq(0) tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

    }

    // Tô đậm cho Grid
    function onDataBoundGridCompareMonthForAllCompare(arg) {

        let lastRow = $('#gridCompareMonthForAllCompare tbody tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        lastRow = $('#gridCompareMonthForAllCompare tbody:eq(0) tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridCompareMonthForAllCompare tbody tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');

            // Theo % thì loại đối tượng tổng ra
            for (let j = 0; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    function onDataReportTypeID(arg) {

        return {
            month: "@toMonth",
            year: "@toYear",
            reportTypeID: "@reportTypeID",
            marketID: "@marketID"
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>