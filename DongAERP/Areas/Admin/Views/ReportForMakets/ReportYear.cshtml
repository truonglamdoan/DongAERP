@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;

    string monthYear = string.Concat(DateTime.Today.ToString("MMMM"), " ", DateTime.Today.ToString("yyyy"));
}
<script src="~/Areas/Admin/Scripts/ReportForMakets.js"></script>
<h1 class="h3 mb-4 text-gray-800">Chi tiết- Theo Năm</h1>

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("TotalReportBody").Checked(true).Value(2).HtmlAttributes(new { @name = "reportDate" }).Label("Tổng hợp"))
</div>
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("DABReportBody").Value(0).HtmlAttributes(new { @name = "reportDate" }).Label("DAB"))
</div>
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("DAMReportBody").Value(1).HtmlAttributes(new { @name = "reportDate" }).Label("DAMTC"))
</div>
<hr class="sidebar-divider">
<div style=" display: flex; ">
    <ul style="width: 30%;position: absolute;display: block;">
        <span style="float: left;margin-right: 30px;margin-top: 5px;">Từ năm: </span>
        <span>
            @(Html.Kendo().DatePicker()
                                                      .Name("FromYear")
                                                      .Start(CalendarView.Decade)
                                                      .Depth(CalendarView.Decade)
                                                      .Format("yyyy")
                                                      .Value(DateTime.Today)
                                                      .DateInput()
                                                      .HtmlAttributes(new { style = "width: 70%;float: left;", title = "monthpicker" })
            )
        </span>
    </ul>
    <ul style=" margin-left: 35%; ">
        <span style="margin-left: 0%;margin-right: 30px;display: inline;">Đến năm: </span>
        <span style=" display: inline-flex; ">
            @(Html.Kendo().DatePicker()
                                                    .Name("ToYear")
                                                    .Start(CalendarView.Decade)
                                                    .Depth(CalendarView.Decade)
                                                    .Format("yyyy")
                                                    .Value(DateTime.Today)
                                                    .DateInput()
                                                      .HtmlAttributes(new { style = "width: 100%", title = "monthpicker" })
            )
        </span>
    </ul>
    @*<ul style="display: inline; " class="search-item">*@
    <ul class="search-item" style=" width: 27%;margin-top: 5px; ">
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-year" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-excel-year" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<div class="row">
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Doanh số chi trả theo từng thị trường (USD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.ReportForMaket>()
                                                    .Name("lineChartReportMaketForYear")
                                                    .Title("Doanh số chi trả theo từng thị trường")
                                                    .Legend(legend => legend
                                                        .Position(ChartLegendPosition.Top)
                                                    )
                                                    .ChartArea(chartArea =>
                                                    {
                                                        chartArea.Height(550);
                                                    })
                                                    .DataSource(ds => ds.Read(read => read.Action("ReportYear", "ReportForMakets").Data("onDataReportTypeID")))
                                                    .Series(series =>
                                                    {

                                                        series.Line(model => model.American).Name("Mỹ").CategoryField("ReportID");
                                                        series.Line(model => model.Asia).Name("Châu Á").CategoryField("ReportID");
                                                        series.Line(model => model.Global).Name("Toàn cầu").CategoryField("ReportID");
                                                        series.Line(model => model.Europe).Name("Châu Âu").CategoryField("ReportID");
                                                        series.Line(model => model.Canada).Name("Canada").CategoryField("ReportID");
                                                        series.Line(model => model.Australia).Name("Úc").CategoryField("ReportID");
                                                        //series.Line(model => model.TongDS).Name("Tổng").CategoryField("ReportID").Color("Gray");
                                                    })
                                                    .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA", "#9A2EFE", "#FE2EF7", "#0000FF")
                                                    .CategoryAxis(axis => axis
                                                        //.Labels(labels => labels.Rotation(-90))
                                                        .Crosshair(c => c.Visible(true))
                                                    )
                                                    .ValueAxis(axis => axis.Numeric()
                                                        .Labels(labels => labels.Format("{0:N2}"))
                                                    //.MajorUnit(10000)
                                                    )
                                                    .Tooltip(tooltip => tooltip
                                                        .Visible(true)
                                                        .Shared(true)
                                                        .Format("{0:N2}")
                                                    )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Doanh số chi trả theo từng thị trường (USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<DongA.Entities.ReportForMaket>()
                                                        .Name("gridReportMaketForYear")
                                                        .HtmlAttributes(new { style = " overflow: auto; " })
                                                        .Columns(columns =>
                                                        {
                                                            columns.Bound(c => c.ReportID).Title("Năm").Width(300).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                                            columns.Bound(c => c.American).Title("Mỹ").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.Asia).Title("Châu Á").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.Global).Title("Toàn cầu").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.Europe).Title("Châu Âu").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.Canada).Title("Canada").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.Australia).Title("Úc").Width(100).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                            columns.Bound(c => c.TongDS).Title("Tổng").Width(200).Format("{0:N2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                                                        })
                                                        .DataSource(dataSource => dataSource
                                                            .Ajax()
                                                            //.Data("DayReport.GetAdditionalData")
                                                            
                                                            .Read(read => read.Action("ReportYear", "ReportForMakets").Data("onDataReportTypeID"))
                                                        )
                                                        .Sortable() // Enable sorting
                                                        .Events(events => events
                                                            .DataBound("onDataBound")
                                                        )
                )
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function onDataBound(arg) {

        let lastRow = $('#gridReportMaketForYear tbody tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold')
    }

    function onDataReportTypeID(arg) {

        let value = localStorage.reportTypeLS;
        if (value != undefined) {

            reportTypeID = value;

            // Change giá trị cho group radio
            switch (value) {
                case '0':
                    $('#DABReportBody_0').prop('checked', true);
                    break;
                case '1':
                    $('#DAMReportBody_1').prop('checked', true);
                    break;
                default:
                    $('#TotalReportBody_2').prop('checked', true);
            }
        }

        return {
            reportTypeID: reportTypeID
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>

<style>
    tr.k-grouping-row {
        display: none;
    }
</style>