@using Kendo.Mvc.UI
@using System.Collections.Generic;
@using System.Web.Mvc;
@using DongA.Entities;
@using System.Data;
@model System.Data.DataTable

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;

    string monthYear = string.Concat(DateTime.Today.ToString("MMMM"), " ", DateTime.Today.ToString("yyyy"));

    string month = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year);
    string lastMonth = string.Empty;
    // Truong hợp tháng hiện tại là tháng 1
    if (DateTime.Today.Month - 1 == 0)
    {
        lastMonth = string.Format("Tháng {0}/{1}", 12, DateTime.Today.Year - 1);
    }
    else
    {
        lastMonth = string.Format("Tháng {0}/{1}", DateTime.Today.Month - 1, DateTime.Today.Year);
    }

    string monthLastYear = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year - 1);

    var listData = (List<string>)ViewData["listData"];

    string toMonth = string.Empty;
    string toYear = string.Empty;
    string reportTypeID = string.Empty;

    if (listData != null)
    {
        toMonth = listData[0];
        toYear = listData[1];
        reportTypeID = listData[2];

        month = string.Format("Tháng {0}/{1}", toMonth, toYear);
        lastMonth = string.Format("Tháng {0}/{1}", int.Parse(toMonth) - 1, toYear);
        monthLastYear = string.Format("Tháng {0}/{1}", toMonth, int.Parse(toYear) - 1);
    }

}
<script src="~/Areas/Admin/Scripts/ReportForMakets.js"></script>
<h1 class="h3 mb-4 text-gray-800">Chi tiết- So sánh theo tháng</h1>

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">

<div style=" display: flex; ">
    
    <ul class="search-item" style="width: 100%;margin-top: 5px;margin-bottom: 0px;">
        @*<a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-gradation-month" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>*@
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-excel-gradation-month" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<p class="mb-4" style=" color: black; font-weight: bold; ">1. Theo doanh số chi trả theo thị trường</p>
<div class="row">
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Doanh số chi trả theo từng thị trường (USD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                        .Name("chartCompareMonth")
                        .Title(string.Format("Doanh số chi trả theo từng thị trường trong tháng {0} \n so với tháng trước và cùng kì năm trước", month))
                        .Legend(legend => legend
                            .Position(ChartLegendPosition.Bottom)
                        )
                        .ChartArea(chartArea =>
                        {
                            chartArea.Height(550);
                        })
                        .DataSource(ds => ds
                            .Read(read => read.Action("SearchColumnsChartCompareForMonth", "ReportForMakets").Data("onDataReportTypeID"))
                            .Group(group => group.Add(model => model.NameGradationCompare))
                            )

                        .Series(series =>
                        {
                            series.Column(model => model.amount).Name("#= group.value #").CategoryField("NameType");

                        })
                        .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA")
                        .CategoryAxis(axis => axis
                            //.Labels(labels => labels.Format("{0}"))
                            .MajorGridLines(lines => lines.Visible(false))
                        )
                        .ValueAxis(axis => axis
                            .Numeric()
                            .Labels(labels => labels.Format("{0:N2}"))
                            .Line(line => line.Visible(false))
                        )
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0:N2}")
                            .Template("#= series.name #: #= kendo.format('{0:N2}', value) #")
                        )
                    //.Events(events => events
                    //    .DataBound("Report.gradationChartDataBound")
                    //)
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Doanh số chi trả theo từng thị trường (USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                    .Name("gridGradationCompare")
                    .HtmlAttributes(new { style = " overflow: auto; " })
                    .Columns(columns =>
                    {
                        Dictionary<string, string> listName = new Dictionary<string, string>();
                        listName.Add("MaketID", "Thị trường");
                        listName.Add("AccumulateID1", month);
                        listName.Add("AccumulateID2", lastMonth);
                        listName.Add("AccumulateID3", monthLastYear);
                        listName.Add("CompareToMonth", "Tăng giảm so với </br> tháng trước (+/-)");
                        listName.Add("CompareToMonthPercent", "Tăng giảm so với </br> tháng trước (%)");
                        listName.Add("CompareToMonthLastYear", "Tăng giảm so với </br> cùng kì năm trước (+/-)");
                        listName.Add("CompareToMonthLastYearPercent", "Tăng giảm so với </br> cùng kì năm trước (%)");
                        // List danh sach in đậm
                        string[] listBoldArray = { "CompareToMonth", "CompareToMonthPercent", "CompareToMonthLastYear", "CompareToMonthLastYearPercent" };
                        foreach (DataColumn col in Model.Columns)
                        {
                            if (listName.ContainsKey(col.ColumnName))
                            {
                                if (col.ColumnName.Contains("MaketID"))
                                {
                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                }
                                else if (!listBoldArray.Contains(col.ColumnName))
                                {
                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HtmlAttributes(new { style = " text-align: right;" }).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" });
                                }
                                else
                                {
                                                            
                                    // trường hợp là % thì thêm % sao giá trị
                                    if (col.ColumnName.Contains("CompareToMonthPercent") || col.ColumnName.Contains("CompareToMonthLastYearPercent"))
                                    {
                                        columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2} %").HtmlAttributes(new { style = " font-weight: 700; text-align: right;" }).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" });
                                    }
                                    else
                                    {
                                        columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HtmlAttributes(new { style = " font-weight: 700; text-align: right;" }).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" });
                                    }
                                }
                            }
                        }
                    })
                    .Sortable() // Enable sorting
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("SearchReportCompareForMonth", "ReportForMakets").Data("onDataReportTypeID"))
                    )
                    .Events(events => events
                        .DataBound("onDataBoundGradationCompare")
                    )
                )
            </div>
        </div>
    </div>
</div>

<hr class="sidebar-divider">
<p class="mb-4" style=" color: black; font-weight: bold; ">2. Theo tỉ trọng chi trả theo thị trường </p>
<div class="row">
    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng theo từng thị trường của tháng hiện tại (%)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                        .Name("chartGradationCompareMonth")
                                .Title(title => title
                                    .Text(month)
                                    .Position(ChartTitlePosition.Bottom))
                        .Legend(legend => legend
                            .Visible(false)
                        )
                        .DataSource(ds => ds.Read(read => read.Action("SearchGradationComparePieForMonth", "ReportForMakets").Data("onDataReportTypeID")))
                        .ChartArea(chart => chart
                            .Background("transparent")
                            )
                        //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                        .Series(series =>
                        {
                            series.Pie(model => model.value, model => model.category, model => model.color)
                            .Labels(labels => labels
                                .Template("#= category #: \n #= value#%")
                                .Background("transparent")
                                .Visible(true)
                                .Font("bold 12px sans-serif")
                            )
                            .StartAngle(50);
                        })
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0}%")
                        )
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng theo từng thị trường của tháng trước (%)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                        .Name("chartGradationCompareLastMonth")
                                .Title(title => title
                                    .Text(lastMonth)
                                    .Position(ChartTitlePosition.Bottom))
                        .Legend(legend => legend
                            .Visible(false)
                        )
                        .DataSource(ds => ds.Read(read => read.Action("SearchGradationComparePieForLastMonth", "ReportForMakets").Data("onDataReportTypeID")))
                        .ChartArea(chart => chart
                            .Background("transparent")
                            )
                        //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                        .Series(series =>
                        {
                            series.Pie(model => model.value, model => model.category, model => model.color)
                            .Labels(labels => labels
                                .Template("#= category #: \n #= value#%")
                                .Background("transparent")
                                .Visible(true)
                                .Font("bold 12px sans-serif")
                            )
                            .StartAngle(50);
                        })
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0}%")
                        )
                    )
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng theo từng thị trường của cùng kì tháng năm trước (USD)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                        .Name("chartGradationCompareMonthLastYear")
                                .Title(title => title
                                    .Text(monthLastYear)
                                    .Position(ChartTitlePosition.Bottom))
                        .Legend(legend => legend
                            .Visible(false)
                        )
                        .DataSource(ds => ds.Read(read => read.Action("SearchGradationComparePieForMonthLastYear", "ReportForMakets").Data("onDataReportTypeID")))
                        .ChartArea(chart => chart
                            .Background("transparent")
                            )
                        //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                        .Series(series =>
                        {
                            series.Pie(model => model.value, model => model.category, model => model.color)
                            .Labels(labels => labels
                                .Template("#= category #: \n #= value#%")
                                .Background("transparent")
                                .Visible(true)
                                .Font("bold 12px sans-serif")
                            )
                            .StartAngle(50);
                        })
                        .Tooltip(tooltip => tooltip
                            .Visible(true)
                            .Format("{0}%")
                        )
                    )
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Tỉ trọng theo từng thị trường của tháng hiện tại so với tháng trước và cùng kỳ năm trước (%)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                    .Name("gridGradationComparePercent")
                    .HtmlAttributes(new { style = " overflow: auto; " })
                    .Columns(columns =>
                    {
                        Dictionary<string, string> listName = new Dictionary<string, string>();
                        listName.Add("MaketID", "Thị trường");
                        listName.Add("AccumulateID1", month);
                        listName.Add("AccumulateID2", lastMonth);
                        listName.Add("AccumulateID3", monthLastYear);
                        listName.Add("CompareToMonthPercent", "Tăng giảm so với </br> tháng trước (%)");
                        listName.Add("CompareToMonthLastYearPercent", "Tăng giảm so với </br> cùng kì năm trước (%)");
                        // List danh sach in đậm
                        string[] listBoldArray = {"CompareToMonthPercent", "CompareToMonthLastYearPercent" };
                        foreach (DataColumn col in Model.Columns)
                        {
                            if (listName.ContainsKey(col.ColumnName))
                            {
                                if (col.ColumnName.Contains("MaketID"))
                                {
                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                }
                                else if (!listBoldArray.Contains(col.ColumnName))
                                {
                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2} %").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                }
                                else
                                {
                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2} %").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " font-weight: 700; text-align: right;" });
                                }
                            }
                        }
                    })
                    .Sortable() // Enable sorting
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("SearchReportCompareForMonthPercent", "ReportForMakets").Data("onDataReportTypeID"))
                    )
                    .Events(events => events
                        .DataBound("onDataBoundGradationComparePercent")
                    )
                )
            </div>
        </div>
    </div>
</div>

@*<style>
    tr.k-grouping-row {
        display: none;
    }
</style>*@

<script type="text/javascript">

    function onDataBoundGradationCompare(e) {
        let listRows = $('#gridGradationCompare tbody tr');
        $(listRows[listRows.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompare tbody tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 4; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    function onDataBoundGradationComparePercent(e) {

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationComparePercent tbody tr');
        for (let i = 0; i < trGrid.length - 1; i++) {

            let tdGrid = $(trGrid[i]).find('td');

            // Theo % thì loại đối tượng tổng ra
            for (let j = 4; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    function onDataReportTypeID(arg) {

        return {
            month: "@toMonth",
            year: "@toYear",
            reportTypeID: "@reportTypeID"
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>