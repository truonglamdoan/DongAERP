@using Kendo.Mvc.UI
@using System.Collections.Generic;
@using System.Web.Mvc;
@using DongA.Entities;
@using System.Data;
@model System.Data.DataTable

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;
    int year = DateTime.Today.Year;

    var listData = (List<string>)ViewData["listData"];

    string gradation = string.Empty;
    string toYear = string.Empty;
    string reportTypeID = string.Empty;

    string titleGradatonYear = string.Empty;
    string titleGradatonLastYear = string.Empty;

    if (listData != null)
    {
        gradation = listData[0];
        toYear = listData[1];
        reportTypeID = listData[2];

        string text = " tháng đầu năm";
        switch (gradation)
        {
            case "1":
                text = string.Concat("3", text);
                break;
            case "2":
                text = string.Concat("6", text);
                break;
            case "3":
                text = string.Concat("9", text);
                break;
            default:
                text = string.Concat("12", text);
                break;
        }

        titleGradatonYear = string.Format("Lũy kế {0} {1}", text, toYear);
        titleGradatonLastYear = string.Format("Lũy kế {0} {1}", text, int.Parse(toYear) - 1);
    }
}
<script src="~/Areas/Admin/Scripts/ReportDetailtByPartnerLT.js"></script>
<h1 class="h3 mb-4 text-gray-800">Chi tiết- Theo Giai đoạn</h1>

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">
<div style=" display: flex; ">

    <ul class="search-item" style="width: 100%;margin-top: 5px;margin-bottom: 0px;">
        @*<a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-gradation-forAll" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>*@
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-excel-gradation-forAll" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<p class="mb-4">1. Theo doanh số chi trả loại hình dịch vụ</p>
<div class="row">

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Loại hình dịch vụ (Nguyên tệ)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                    .Name("gridGradationCompare")
                    .HtmlAttributes(new { style = " overflow: auto; " })
                    .Columns(columns =>
                    {
                        columns.Bound("STT").Title("STT").Locked(true).Width(100)
                        .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                        .HtmlAttributes(new { style = " text-align: center;" });

                        columns.Bound("PartnerName").Title("Đối tác").Locked(true).Width(250)
                        .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                        .HtmlAttributes(new { style = " text-align: center;" });

                        columns.Group(group => group
                            .Title("VND")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("VND1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("VND2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS1").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("USD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("USD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("USD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS2").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("EUR")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("EUR1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("EUR2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS3").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("CAD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("CAD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("CAD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS4").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("AUD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("AUD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("AUD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS5").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("GBP")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("GBP1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("GBP2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS6").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );
                    })
                    .Scrollable(scrollable => scrollable.Height(500))
                    .Sortable() // Enable sorting
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        //.Batch(true)
                        //.ServerOperation(false)
                        .Read(read => read.Action("SearchGridReportForGradation", "ReportDetailtPartnerLT").Data("onDataReportTypeID"))

                    )
                    .Events(events => events
                        .DataBound("onDataBoundgridGradationCompare")
                    )
                )
            </div>
        </div>
    </div>

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Loại hình dịch vụ (Quy USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                    .Name("gridGradationCompareConvert")
                    .HtmlAttributes(new { style = " overflow: auto; " })
                    .Columns(columns =>
                    {
                        columns.Bound("STT").Title("STT").Locked(true).Width(100)
                        .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                        .HtmlAttributes(new { style = " text-align: center;" });

                        columns.Bound("PartnerName").Title("Đối tác").Locked(true).Width(250)
                        .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                        .HtmlAttributes(new { style = " text-align: center;" });

                        columns.Group(group => group
                            .Title("VND")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("VND1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("VND2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS1").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("USD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("USD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("USD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS2").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("EUR")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("EUR1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("EUR2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS3").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("CAD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("CAD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("CAD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS4").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("AUD")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("AUD1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("AUD2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS5").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );

                        columns.Group(group => group
                            .Title("GBP")
                            .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;background-color: orange;" })
                            .HtmlAttributes(new { style = " text-align: center;" })
                            .Columns(info =>
                            {
                                info.Bound("GBP1").Title(string.Format("Năm {0}", toYear)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });
                                info.Bound("GBP2").Title(string.Format("Năm {0}", toYear == "" ? 0 : int.Parse(toYear) - 1)).Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right;" });

                                info.Bound("TDS6").Title("Tăng/Giảm").Format("{0:n2}").Width(200)
                                    .HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" })
                                    .HtmlAttributes(new { style = " text-align: right; font-weight: 700;" });
                            })
                        );
                    })
                    .Scrollable(scrollable => scrollable.Height(500))
                    .Sortable() // Enable sorting
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        //.Batch(true)
                        //.ServerOperation(false)
                        .Read(read => read.Action("SearchGridReportForGradationConvert", "ReportDetailtPartnerLT").Data("onDataReportTypeID"))

                    )
                    .Events(events => events
                        .DataBound("onDataBoundgridGradationCompareConvert")
                    )
                )
            </div>
        </div>
    </div>
</div>

@*<style>
        tr.k-grouping-row {
            display: none;
        }
    </style>*@

<script type="text/javascript">

    function GradationCompareDSGrid() {

        let gradationDic = $("#gradation").data("kendoComboBox").value() + "," + $("#gradation").data("kendoComboBox").text();
        return {
            Gradation: gradationDic,
            ToYear: $('#ToYear').data('kendoDatePicker').value().getFullYear(),
        };
    }

    // In đậm cho Grid
    function onDataBoundgridGradationCompare(arg) {

        let lastRow = $('#gridGradationCompare tbody:eq(0) tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        lastRow = $('#gridGradationCompare tbody[role="rowgroup"] tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompare tbody[role="rowgroup"] tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 2; j < tdGrid.length; j++) {

                let tdCheckColumn = tdGrid[j].dataset.field;

                // Trường hợp là các cột tăng giảm
                if (tdCheckColumn == 'TDS1' || tdCheckColumn == 'TDS2' || tdCheckColumn == 'TDS3'
                    || tdCheckColumn == 'TDS4' || tdCheckColumn == 'TDS5' || tdCheckColumn == 'TDS6') {

                    tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                    // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                    if (tdCellValue != null) {
                        $(tdGrid[j]).css('color', 'red');
                        if (tdCellValue > 0) {
                            $(tdGrid[j]).css('color', 'green');
                        }
                    }
                }
            }
        }
    }


    // In đậm cho Grid
    function onDataBoundgridGradationCompareConvert(arg) {

        let lastRow = $('#gridGradationCompareConvert tbody:eq(0) tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        lastRow = $('#gridGradationCompareConvert tbody[role="rowgroup"] tr');
        $(lastRow[lastRow.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompareConvert tbody[role="rowgroup"] tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 2; j < tdGrid.length; j++) {

                let tdCheckColumn = tdGrid[j].dataset.field;

                // Trường hợp là các cột tăng giảm
                if (tdCheckColumn == 'TDS1' || tdCheckColumn == 'TDS2' || tdCheckColumn == 'TDS3'
                    || tdCheckColumn == 'TDS4' || tdCheckColumn == 'TDS5' || tdCheckColumn == 'TDS6') {

                    tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                    // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                    if (tdCellValue != null) {
                        $(tdGrid[j]).css('color', 'red');
                        if (tdCellValue > 0) {
                            $(tdGrid[j]).css('color', 'green');
                        }
                    }
                }
            }
        }
    }


    function onDataReportTypeID(arg) {

        return {
            gradation: "@gradation",
            year: "@toYear",
            reportTypeID: "@reportTypeID"
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>