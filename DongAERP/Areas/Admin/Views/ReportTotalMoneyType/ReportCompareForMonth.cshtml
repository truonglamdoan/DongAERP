@using Kendo.Mvc.UI
@using System.Collections.Generic;
@using System.Web.Mvc;
@using DongA.Entities;
@using System.Data;
@model System.Data.DataTable

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    string NameUrl = ViewBag.NameURL;

    string monthYear = string.Concat(DateTime.Today.ToString("MMMM"), " ", DateTime.Today.ToString("yyyy"));

    string month = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year);
    string lastMonth = string.Format("Tháng {0}/{1}", DateTime.Today.Month - 1, DateTime.Today.Year);
    string monthLastYear = string.Format("Tháng {0}/{1}", DateTime.Today.Month, DateTime.Today.Year - 1);

}
<script src="~/Areas/Admin/Scripts/ReportForTotalMoneyType.js"></script>
<h1 class="h3 mb-4 text-gray-800">Chi tiết- So sánh theo tháng</h1>

<h6 class="m-0 font-weight-bold text-primary">@NameUrl</h6>
<hr class="sidebar-divider">
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("TotalReportBody").Checked(true).Value(2).HtmlAttributes(new { @name = "reportDate" }).Label("Tổng hợp"))
</div>
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("DABReportBody").Value(0).HtmlAttributes(new { @name = "reportDate" }).Label("DAB"))
</div>
<div style=" display: inline; margin-right: 10%; ">
    @(Html.Kendo().RadioButton().Name("DAMReportBody").Value(1).HtmlAttributes(new { @name = "reportDate" }).Label("DAMTC"))
</div>
<hr class="sidebar-divider">
<div style=" display: flex; ">
    <ul style="width: 30%;position: absolute;display: block;">
        <span style="float: left;margin-right: 30px;margin-top: 5px;">Giai đoạn: </span>
        <span>
            @(Html.Kendo().DatePicker()
                                      .Name("FromMonth")
                                      .Start(CalendarView.Year)
                                      .Depth(CalendarView.Year)
                                      .Format("MMMM yyyy")
                                      .Value(monthYear)
                                      .DateInput()
                                      .HtmlAttributes(new { style = "width: 70%;float: left;", title = "monthpicker" })
            )
        </span>
    </ul>
    <ul style=" margin-left: 35%; ">
        <span style="margin-left: 0%;margin-right: 30px;display: inline;"></span>
        <span style=" display: inline-flex; ">
            @*@(Html.Kendo().DatePicker()
                                                    .Name("ToYear")
                                                    .Start(CalendarView.Decade)
                                                    .Depth(CalendarView.Decade)
                                                    .Format("yyyy")
                                                    .Value(DateTime.Today)
                                                    .DateInput()
                                                    .HtmlAttributes(new { style = "width: 100%", title = "monthpicker" })
            )*@
        </span>
    </ul>
    @*<ul style="display: inline; " class="search-item">*@
    <ul class="search-item" style=" width: 27%;margin-top: 5px; ">
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm search-grid-gradation-month" href="#" style="float: left;"><i class="fas fa-search fa-sm text-white-50"></i> Tìm kiếm</a>
        <a class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm print-excel-gradation-month" href="#" style=" float: right;"><i class="fas fa-download fa-sm text-white-50"></i> In báo cáo Excel</a>
    </ul>
</div>
<hr class="sidebar-divider">
<p class="mb-4" style=" color: black; font-weight: bold; ">1. Theo doanh số chi trả theo từng loại tiền</p>
<div class="row">
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ cột Doanh số chi trả theo từng loại tiền</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationCompare>()
                                .Name("chartCompareMonth")
                                .Title(string.Format("Doanh số chi trả theo từng loại tiền trong tháng {0} \n so với tháng trước và cùng kì năm trước", DateTime.Today.Month))
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Bottom)
                                )
                                .ChartArea(chartArea =>
                                {
                                    chartArea.Height(550);
                                })
                                .DataSource(ds => ds
                                    .Read(read => read.Action("ColumnsChartCompareForMonth", "ReportTotalMoneyType").Data("onDataReportTypeID"))
                                    .Group(group => group.Add(model => model.NameGradationCompare))
                                    )

                                .Series(series =>
                                {
                                    series.Column(model => model.amount).Name("#= group.value #").CategoryField("NameType");

                                })
                                .SeriesColors("#FFBF00", "#40FF00", "#2ECCFA")
                                .CategoryAxis(axis => axis
                                    //.Labels(labels => labels.Format("{0}"))
                                    .MajorGridLines(lines => lines.Visible(false))
                                )
                                .ValueAxis(axis => axis
                                    .Numeric()
                                    .Labels(labels => labels.Format("{0:N0}"))
                                    .Line(line => line.Visible(false))
                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0:N0}")
                                    .Template("#= series.name #: #= kendo.format('{0:N0}', value) #")
                                )
                        )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Doanh số chi trả theo từng loại tiền (Nguyên tệ)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                            .Name("gridGradationCompare")
                            .HtmlAttributes(new { style = " overflow: auto; " })
                            .Columns(columns =>
                            {
                                Dictionary<string, string> listName = new Dictionary<string, string>();
                                listName.Add("ReportID", "Loại tiền");
                                listName.Add("AccumulateID1", month);
                                listName.Add("AccumulateID2", lastMonth);
                                listName.Add("AccumulateID3", monthLastYear);
                                listName.Add("CompareToMonth", "Tăng giảm </br> so với </br> tháng (+/-)");
                                listName.Add("CompareToMonthPercent", "Tăng giảm </br> so với </br> tháng (%)");
                                listName.Add("CompareToMonthLastYear", "Tăng giảm </br> so với cùng kì </br> năm trước (+/-)");
                                listName.Add("CompareToMonthLastYearPercent", "Tăng giảm </br> so với cùng kì </br> năm trước (%)");

                                // List danh sach in đậm
                                string[] listBoldArray = { "CompareToMonth", "CompareToMonthPercent", "CompareToMonthLastYear", "CompareToMonthLastYearPercent" };
                                foreach (DataColumn col in Model.Columns)
                                {
                                    if (listName.ContainsKey(col.ColumnName))
                                    {
                                        if (col.ColumnName.Contains("ReportID"))
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                        }
                                        else if (!listBoldArray.Contains(col.ColumnName))
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        }
                                        else
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HtmlAttributes(new { style = " font-weight: 700; text-align: right;" }).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" });
                                        }
                                    }
                                }
                            })

                            //.Pageable(pageable => pageable
                            //    //.PageSizes(new int[] { 10, 20, 31 })
                            //    .Messages(message => message
                            //        .Display("")
                            //        .ItemsPerPage("")
                            //    )
                            //) // Enable paging
                            .Sortable() // Enable sorting
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                //.PageSize(30)
                                .Read(read => read.Action("ReportCompareForMonth", "ReportTotalMoneyType").Data("onDataReportTypeID"))
                            )
                            .Events(events => events
                                .DataBound("onDataBoundGradationCompare")
                            )
                )
            </div>
        </div>
    </div>

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Doanh số chi trả theo từng loại tiền (Quy USD)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                            .Name("gridGradationCompareConvert")
                            .HtmlAttributes(new { style = " overflow: auto; " })
                            .Columns(columns =>
                            {
                                Dictionary<string, string> listName = new Dictionary<string, string>();
                                listName.Add("ReportID", "Loại tiền");
                                listName.Add("AccumulateID1", month);
                                listName.Add("AccumulateID2", lastMonth);
                                listName.Add("AccumulateID3", monthLastYear);
                                listName.Add("CompareToMonth", "Tăng giảm </br> so với </br> tháng (+/-)");
                                listName.Add("CompareToMonthPercent", "Tăng giảm </br> so với </br> tháng (%)");
                                listName.Add("CompareToMonthLastYear", "Tăng giảm </br> so với cùng kì </br> năm trước (+/-)");
                                listName.Add("CompareToMonthLastYearPercent", "Tăng giảm </br> so với cùng kì </br> năm trước (%)");

                                // List danh sach in đậm
                                string[] listBoldArray = { "CompareToMonth", "CompareToMonthPercent", "CompareToMonthLastYear", "CompareToMonthLastYearPercent" };
                                foreach (DataColumn col in Model.Columns)
                                {
                                    if (listName.ContainsKey(col.ColumnName))
                                    {
                                        if (col.ColumnName.Contains("ReportID"))
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                        }
                                        else if (!listBoldArray.Contains(col.ColumnName))
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                        }
                                        else
                                        {
                                            columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2}").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " font-weight: 700;text-align: right; " });
                                        }
                                    }
                                }
                            })
                            //.Pageable(pageable => pageable
                            //    //.PageSizes(new int[] { 10, 20, 31 })
                            //    .Messages(message => message
                            //        .Display("")
                            //        .ItemsPerPage("")
                            //    )
                            //) // Enable paging
                            .Sortable() // Enable sorting
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                //.PageSize(30)
                                .Read(read => read.Action("ReportCompareForMonthConvert", "ReportTotalMoneyType").Data("onDataReportTypeID"))
                            )
                            .Events(events => events
                                .DataBound("onDataBoundGradationCompareConvert")
                            )
                )
            </div>
        </div>
    </div>
</div>

<hr class="sidebar-divider">
<p class="mb-4" style=" color: black; font-weight: bold; ">2. Theo tỉ trọng doanh số chi trả theo từng loại tiền </p>
<div class="row">
    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng DS chi trả theo từng loại tiền tháng hiện tại (%)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                                                .Name("chartGradationCompareMonth")
                                                        .Title(title => title
                                                            .Text(month)
                                                            .Position(ChartTitlePosition.Bottom))
                                                .Legend(legend => legend
                                                    .Visible(false)
                                                )
                                                .DataSource(ds => ds.Read(read => read.Action("GradationComparePieForMonth", "ReportTotalMoneyType").Data("onDataReportTypeID")))
                                                .ChartArea(chart => chart
                                                    .Background("transparent")
                                                    )
                                                //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                                                .Series(series =>
                                                {
                                                    series.Pie(model => model.value, model => model.category, model => model.color)
                                                    .Labels(labels => labels
                                                        .Template("#= category #: \n #= value#%")
                                                        .Background("transparent")
                                                        .Visible(true)
                                                        .Font("bold 12px sans-serif")
                                                    )
                                                    .StartAngle(180);
                                                })
                                                .Tooltip(tooltip => tooltip
                                                    .Visible(true)
                                                    .Format("{0}%")
                                                )
                        )
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng DS chi trả theo từng loại tiền tháng trước (%)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                                                .Name("chartGradationCompareLastMonth")
                                                        .Title(title => title
                                                            .Text(lastMonth)
                                                            .Position(ChartTitlePosition.Bottom))
                                                .Legend(legend => legend
                                                    .Visible(false)
                                                )
                                                .DataSource(ds => ds.Read(read => read.Action("GradationComparePieForMonthLastMonth", "ReportTotalMoneyType").Data("onDataReportTypeID")))
                                                .ChartArea(chart => chart
                                                    .Background("transparent")
                                                    )
                                                //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                                                .Series(series =>
                                                {
                                                    series.Pie(model => model.value, model => model.category, model => model.color)
                                                    .Labels(labels => labels
                                                        .Template("#= category #: \n #= value#%")
                                                        .Background("transparent")
                                                        .Visible(true)
                                                        .Font("bold 12px sans-serif")
                                                    )
                                                    .StartAngle(180);
                                                })
                                                .Tooltip(tooltip => tooltip
                                                    .Visible(true)
                                                    .Format("{0}%")
                                                )
                        )
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <!-- Circle Buttons -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Biểu đồ Tỉ trọng DS chi trả theo từng loại tiền cùng kì năm trước (%)</h6>
            </div>
            <div class="card-body">
                <div class="demo-section k-content wide">
                    @(Html.Kendo().Chart<DongA.Entities.GradationChartPie>()
                                                .Name("chartGradationCompareMonthLastYear")
                                                        .Title(title => title
                                                            .Text(monthLastYear)
                                                            .Position(ChartTitlePosition.Bottom))
                                                .Legend(legend => legend
                                                    .Visible(false)
                                                )
                                                .DataSource(ds => ds.Read(read => read.Action("GradationComparePieForMonthLastYear", "ReportTotalMoneyType").Data("onDataReportTypeID")))
                                                .ChartArea(chart => chart
                                                    .Background("transparent")
                                                    )
                                                //.HtmlAttributes(new { style="background: center no-repeat url(" + @Url.Content("~/Content/shared/world-map.png")})
                                                .Series(series =>
                                                {
                                                    series.Pie(model => model.value, model => model.category, model => model.color)
                                                    .Labels(labels => labels
                                                        .Template("#= category #: \n #= value#%")
                                                        .Background("transparent")
                                                        .Visible(true)
                                                        .Font("bold 12px sans-serif")
                                                    )
                                                    .StartAngle(180);
                                                })
                                                .Tooltip(tooltip => tooltip
                                                    .Visible(true)
                                                    .Format("{0}%")
                                                )
                        )
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6" style=" flex: none; max-width: none; ">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Bảng số liệu Tỉ trọng doanh số chi trả theo từng loại tiền (%)</h6>
            </div>
            <div class="card-body">
                @(Html.Kendo().Grid<dynamic>()
                                    .Name("gridGradationComparePercent")
                                    .HtmlAttributes(new { style = " overflow: auto; " })
                                    .Columns(columns =>
                                    {
                                        Dictionary<string, string> listName = new Dictionary<string, string>();
                                        listName.Add("ReportID", "Loại tiền");
                                        listName.Add("AccumulateID1", month);
                                        listName.Add("AccumulateID2", lastMonth);
                                        listName.Add("AccumulateID3", monthLastYear);
                                        listName.Add("CompareToMonthPercent", "Tăng giảm </br> so với </br> tháng (%)");
                                        listName.Add("CompareToMonthLastYearPercent", "Tăng giảm </br> so với cùng kì </br> năm trước (%)");
                                        // List danh sach in đậm
                                        string[] listBoldArray = { "CompareToMonth", "CompareToMonthPercent", "CompareToMonthLastYear", "CompareToMonthLastYearPercent" };
                                        foreach (DataColumn col in Model.Columns)
                                        {
                                            if (listName.ContainsKey(col.ColumnName))
                                            {
                                                if (col.ColumnName.Contains("ReportID"))
                                                {
                                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: center;" });
                                                }
                                                else if (!listBoldArray.Contains(col.ColumnName))
                                                {
                                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2} %").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " text-align: right;" });
                                                }
                                                else
                                                {
                                                    columns.Bound(col.ColumnName).Title(listName[col.ColumnName]).Format("{0:n2} %").HeaderHtmlAttributes(new { style = "text-align: center;font-weight: 700;" }).HtmlAttributes(new { style = " font-weight: 700; text-align: right;" });
                                                }
                                            }
                                        }
                                    })
                                    //.Pageable(pageable => pageable
                                    //    //.PageSizes(new int[] { 10, 20, 31 })
                                    //    .Messages(message => message
                                    //        .Display("")
                                    //        .ItemsPerPage("")
                                    //    )
                                    //) // Enable paging
                                    .Sortable() // Enable sorting
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        //.Data("DayReport.GetAdditionalData")
                                        //.PageSize(30)
                                        .Read(read => read.Action("ReportCompareForMonthPercent", "ReportTotalMoneyType").Data("onDataReportTypeID"))
                                    )
                                    .Events(events => events
                                        .DataBound("onDataBoundGradationComparePercent")
                                    )
        )
            </div>
        </div>
    </div>
</div>

<style>
    tr.k-grouping-row {
        display: none;
    }
</style>

<script type="text/javascript">
    
    function onDataBoundGradationCompare(e) {
        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompare tbody tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 4; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    function onDataBoundGradationComparePercent(e) {
        let listRows = $('#gridGradationComparePercent tbody tr');
        $(listRows[listRows.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationComparePercent tbody tr');
        for (let i = 0; i < trGrid.length - 1; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 4; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }

    function onDataBoundGradationCompareConvert(e) {
        let listRows = $('#gridGradationCompareConvert tbody tr');
        $(listRows[listRows.length - 1]).css('font-weight', 'bold');

        // Tô màu dòng record có tỉ lệ tăng giảm
        let trGrid = $('#gridGradationCompareConvert tbody tr');
        for (let i = 0; i < trGrid.length; i++) {

            let tdGrid = $(trGrid[i]).find('td');
            for (let j = 4; j < tdGrid.length; j++) {
                tdCellValue = kendo.parseFloat(tdGrid[j].textContent);

                // Điều kiện nếu td là âm thì tô màu đỏ ngược lại màu Xanh
                if (tdCellValue != null) {
                    $(tdGrid[j]).css('color', 'red');
                    if (tdCellValue > 0) {
                        $(tdGrid[j]).css('color', 'green');
                    }
                }
            }
        }
    }


    function onDataReportTypeID(arg) {

        let value = localStorage.reportTypeLS;
        if (value != undefined) {

            reportTypeID = value;

            // Change giá trị cho group radio
            switch (value) {
                case '0':
                    $('#DABReportBody_0').prop('checked', true);
                    break;
                case '1':
                    $('#DAMReportBody_1').prop('checked', true);
                    break;
                default:
                    $('#TotalReportBody_2').prop('checked', true);
            }
        }

        return {
            reportTypeID: reportTypeID
        };
    }

    // Change radio
    $("input[name='reportDate']").change(function () {

        localStorage.removeItem('reportTypeLS');
        let reportTypeLS = $('input[name="reportDate"]:checked').val();
        localStorage.reportTypeLS = reportTypeLS;
        // Do something interesting here
    });
</script>